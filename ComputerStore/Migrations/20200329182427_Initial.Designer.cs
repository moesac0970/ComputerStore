// <auto-generated />
using System;
using ComputerStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComputerStore.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200329182427_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComputerStore.Lib.Models.BearerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BearerToken");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BearerHistories");
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("FileName");

                    b.Property<int>("Parttype");

                    b.Property<int>("PcPartId");

                    b.Property<string>("Type");

                    b.Property<double>("WeightMb");

                    b.HasKey("Id");

                    b.HasIndex("PcPartId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5345),
                            FileName = "amd_ryzen_5.jpg",
                            Parttype = 2,
                            PcPartId = 4,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7140),
                            FileName = "amd_ryzen_7.jpg",
                            Parttype = 2,
                            PcPartId = 5,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7160),
                            FileName = "AMD-Ryzen-9-3950X.jpg",
                            Parttype = 2,
                            PcPartId = 6,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7166),
                            FileName = "asus_gaming.jpg",
                            Parttype = 2,
                            PcPartId = 7,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7169),
                            FileName = "asus_rog_strix.jpg",
                            Parttype = 2,
                            PcPartId = 8,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7172),
                            FileName = "ASUS_ROG_Strix_Helios.jpg",
                            Parttype = 2,
                            PcPartId = 9,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7175),
                            FileName = "Corsair_carbide_spec_omega.jpg",
                            Parttype = 2,
                            PcPartId = 28,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7178),
                            FileName = "Cougar_conquer_atx_gaming.jpg",
                            Parttype = 2,
                            PcPartId = 10,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7181),
                            FileName = "gigabyte_MD80.jpg",
                            Parttype = 2,
                            PcPartId = 11,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7184),
                            FileName = "intel_i5.jpg",
                            Parttype = 2,
                            PcPartId = 14,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 13,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7187),
                            FileName = "intel_i7.jpg",
                            Parttype = 2,
                            PcPartId = 15,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 14,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7190),
                            FileName = "intel_i9.jpg",
                            Parttype = 2,
                            PcPartId = 16,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 15,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7193),
                            FileName = "intel_server_motherboard.jpg",
                            Parttype = 2,
                            PcPartId = 17,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 16,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7196),
                            FileName = "ldlc_ssd_pcienvme_240.jpg",
                            Parttype = 2,
                            PcPartId = 18,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 17,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7199),
                            FileName = "Msi_b450_gaming.jpg",
                            Parttype = 2,
                            PcPartId = 19,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 18,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7202),
                            FileName = "sandisk_sdcard_1tb.jpg",
                            Parttype = 2,
                            PcPartId = 20,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 19,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7204),
                            FileName = "seagate_barracuda_5tb.jpg",
                            Parttype = 2,
                            PcPartId = 21,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 20,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7207),
                            FileName = "Seagate_barracuda_8tb.jpg",
                            Parttype = 2,
                            PcPartId = 22,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 21,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7210),
                            FileName = "seagate_barracuda_ssd_510.jpg",
                            Parttype = 2,
                            PcPartId = 23,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 22,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7215),
                            FileName = "seagate_nighthawk_8tb.jpg",
                            Parttype = 2,
                            PcPartId = 24,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 23,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7217),
                            FileName = "thermaltake_core3_g3.jpg",
                            Parttype = 2,
                            PcPartId = 25,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 24,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7220),
                            FileName = "wd_blue_1tb.jpg",
                            Parttype = 2,
                            PcPartId = 26,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 25,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7223),
                            FileName = "wd_red_nas_hdd_2tb.jpg",
                            Parttype = 2,
                            PcPartId = 27,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 26,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7226),
                            FileName = "amd_vega_11.jpg",
                            Parttype = 1,
                            PcPartId = 32,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 27,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7229),
                            FileName = "amd-radeon-rx-5700.jpg",
                            Parttype = 1,
                            PcPartId = 33,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 28,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7232),
                            FileName = "geforce_gtx_1070_founder.jpg",
                            Parttype = 1,
                            PcPartId = 30,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 29,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7235),
                            FileName = "geforce_rtx_2080ti_11gb.jpg",
                            Parttype = 1,
                            PcPartId = 31,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 30,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7238),
                            FileName = "gtx_1660ti.jpg",
                            Parttype = 1,
                            PcPartId = 1,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 31,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7241),
                            FileName = "Gtx-1050Ti.jpg",
                            Parttype = 1,
                            PcPartId = 29,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 32,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7244),
                            FileName = "radeon-rx-5600xt.jpg",
                            Parttype = 1,
                            PcPartId = 34,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 33,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7246),
                            FileName = "intel_core_pentium.jpg",
                            Parttype = 0,
                            PcPartId = 13,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 34,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7249),
                            FileName = "wd_blue_nvme_ssd_500.jpg",
                            Parttype = 0,
                            PcPartId = 2,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 35,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7252),
                            FileName = "Seagate_BarraCuda_SSD__500_GB.jpg",
                            Parttype = 0,
                            PcPartId = 3,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        },
                        new
                        {
                            Id = 36,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7392),
                            FileName = "gigabyte_x570.jpg",
                            Parttype = 0,
                            PcPartId = 12,
                            Type = "image/jpeg",
                            WeightMb = 1.3
                        });
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Maker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Makers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 207, DateTimeKind.Local).AddTicks(7399),
                            Name = "Nvidia"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8896),
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8913),
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8917),
                            Name = "Radeon"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8920),
                            Name = "Logitech"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8924),
                            Name = "Razer"
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8927),
                            Name = "GigaByte"
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8930),
                            Name = "Segate"
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8933),
                            Name = "Msi"
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8936),
                            Name = "ThermalTake"
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8939),
                            Name = "WD"
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8942),
                            Name = "Corsair"
                        },
                        new
                        {
                            Id = 13,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8945),
                            Name = "Sandisk"
                        },
                        new
                        {
                            Id = 14,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8948),
                            Name = "Asus"
                        },
                        new
                        {
                            Id = 15,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(8951),
                            Name = "Cougar"
                        },
                        new
                        {
                            Id = 16,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 209, DateTimeKind.Local).AddTicks(9024),
                            Name = "Ldlc"
                        });
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("PlatformUserId");

                    b.HasKey("Id");

                    b.HasIndex("PlatformUserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(2465)
                        });
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsDelivered");

                    b.Property<int?>("OrderId");

                    b.Property<int?>("PcPartsId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PcPartsId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(868),
                            IsDelivered = false,
                            OrderId = 1,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(2073),
                            IsDelivered = false,
                            OrderId = 1,
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Parts.Cpu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cache");

                    b.Property<int>("Channels");

                    b.Property<int>("CoreCount");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<double>("Frequency");

                    b.Property<int>("MemoryType");

                    b.Property<string>("MicroArchitecture");

                    b.Property<int>("PcPartId");

                    b.Property<double>("TDP");

                    b.Property<int>("ThreadCount");

                    b.Property<double>("TurboFrequency");

                    b.Property<double>("Voltage");

                    b.HasKey("Id");

                    b.HasIndex("PcPartId");

                    b.ToTable("Cpus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cache = 8.0,
                            Channels = 6,
                            CoreCount = 4,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(9691),
                            Frequency = 2.7999999999999998,
                            MemoryType = 3,
                            MicroArchitecture = "Kaby lake",
                            PcPartId = 4,
                            TDP = 70.0,
                            ThreadCount = 8,
                            TurboFrequency = 3.6000000000000001,
                            Voltage = 100.0
                        },
                        new
                        {
                            Id = 2,
                            Cache = 8.0,
                            Channels = 6,
                            CoreCount = 4,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(1116),
                            Frequency = 2.7999999999999998,
                            MemoryType = 3,
                            MicroArchitecture = "Kaby lake",
                            PcPartId = 5,
                            TDP = 70.0,
                            ThreadCount = 8,
                            TurboFrequency = 3.6000000000000001,
                            Voltage = 100.0
                        },
                        new
                        {
                            Id = 3,
                            Cache = 8.0,
                            Channels = 6,
                            CoreCount = 4,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(1137),
                            Frequency = 2.7999999999999998,
                            MemoryType = 3,
                            MicroArchitecture = "Kaby lake",
                            PcPartId = 6,
                            TDP = 70.0,
                            ThreadCount = 8,
                            TurboFrequency = 3.6000000000000001,
                            Voltage = 100.0
                        },
                        new
                        {
                            Id = 4,
                            Cache = 8.0,
                            Channels = 6,
                            CoreCount = 4,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(1141),
                            Frequency = 2.7999999999999998,
                            MemoryType = 3,
                            MicroArchitecture = "Kaby lake",
                            PcPartId = 13,
                            TDP = 70.0,
                            ThreadCount = 8,
                            TurboFrequency = 3.6000000000000001,
                            Voltage = 100.0
                        },
                        new
                        {
                            Id = 5,
                            Cache = 8.0,
                            Channels = 6,
                            CoreCount = 4,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(1144),
                            Frequency = 2.7999999999999998,
                            MemoryType = 3,
                            MicroArchitecture = "Kaby lake",
                            PcPartId = 14,
                            TDP = 70.0,
                            ThreadCount = 8,
                            TurboFrequency = 3.6000000000000001,
                            Voltage = 100.0
                        },
                        new
                        {
                            Id = 6,
                            Cache = 8.0,
                            Channels = 6,
                            CoreCount = 4,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(1147),
                            Frequency = 2.7999999999999998,
                            MemoryType = 3,
                            MicroArchitecture = "Kaby lake",
                            PcPartId = 15,
                            TDP = 70.0,
                            ThreadCount = 8,
                            TurboFrequency = 3.6000000000000001,
                            Voltage = 100.0
                        },
                        new
                        {
                            Id = 7,
                            Cache = 8.0,
                            Channels = 6,
                            CoreCount = 4,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(1150),
                            Frequency = 2.7999999999999998,
                            MemoryType = 3,
                            MicroArchitecture = "Kaby lake",
                            PcPartId = 16,
                            TDP = 70.0,
                            ThreadCount = 8,
                            TurboFrequency = 3.6000000000000001,
                            Voltage = 100.0
                        });
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Parts.Gpu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BoostFrequency");

                    b.Property<string>("Connection");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<double>("Frequency");

                    b.Property<double>("Memory");

                    b.Property<int>("MemoryType");

                    b.Property<string>("Os");

                    b.Property<int>("PcPartId");

                    b.Property<string>("Ports");

                    b.Property<double>("PowerUsage");

                    b.HasKey("Id");

                    b.HasIndex("PcPartId");

                    b.ToTable("Gpus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoostFrequency = 1770.0,
                            Connection = "PCIe x16 Versie 3.0",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(7695),
                            Description = "nvdia GeForce GTX 1660 Ti, good for gaming and video editing up to 4K",
                            Frequency = 1500.0,
                            Memory = 8.0,
                            MemoryType = 2,
                            Os = "linux, windows10, windows7, windows8",
                            PcPartId = 1,
                            Ports = "1x HDMI Versie 2.0b, 3x DisplayPort Versie 1.4",
                            PowerUsage = 105.59999999999999
                        },
                        new
                        {
                            Id = 2,
                            BoostFrequency = 1770.0,
                            Connection = "PCIe x16 Versie 3.0",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(9327),
                            Description = "nvdia GeForce GTX 1070 founders edition, good for gaming and video editing up to 4K",
                            Frequency = 1500.0,
                            Memory = 8.0,
                            MemoryType = 2,
                            Os = "linux, windows10, windows7, windows8",
                            PcPartId = 30,
                            Ports = "1x HDMI Versie 2.0b, 3x DisplayPort Versie 1.4",
                            PowerUsage = 105.59999999999999
                        },
                        new
                        {
                            Id = 3,
                            BoostFrequency = 1770.0,
                            Connection = "PCIe x16 Versie 3.0",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(9366),
                            Description = "nvdia GeForce rtx 2080ti, good for gaming and video editing up to 4K",
                            Frequency = 1500.0,
                            Memory = 8.0,
                            MemoryType = 2,
                            Os = "linux, windows10, windows7, windows8",
                            PcPartId = 31,
                            Ports = "1x HDMI Versie 2.0b, 3x DisplayPort Versie 1.4",
                            PowerUsage = 105.59999999999999
                        },
                        new
                        {
                            Id = 4,
                            BoostFrequency = 1770.0,
                            Connection = "PCIe x16 Versie 3.0",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(9376),
                            Description = "amd vega 11, good for gaming and video editing up to 4K",
                            Frequency = 1500.0,
                            Memory = 8.0,
                            MemoryType = 2,
                            Os = "linux, windows10, windows7, windows8",
                            PcPartId = 32,
                            Ports = "1x HDMI Versie 2.0b, 3x DisplayPort Versie 1.4",
                            PowerUsage = 105.59999999999999
                        },
                        new
                        {
                            Id = 5,
                            BoostFrequency = 1770.0,
                            Connection = "PCIe x16 Versie 3.0",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(9386),
                            Description = "amd radeon tx 5600xt, good for gaming and video editing up to 4K",
                            Frequency = 1500.0,
                            Memory = 8.0,
                            MemoryType = 2,
                            Os = "linux, windows10, windows7, windows8",
                            PcPartId = 33,
                            Ports = "1x HDMI Versie 2.0b, 3x DisplayPort Versie 1.4",
                            PowerUsage = 105.59999999999999
                        },
                        new
                        {
                            Id = 6,
                            BoostFrequency = 1770.0,
                            Connection = "PCIe x16 Versie 3.0",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(9395),
                            Description = "radeon rx 5600xt, good for gaming and video editing up to 4K",
                            Frequency = 1500.0,
                            Memory = 8.0,
                            MemoryType = 2,
                            Os = "linux, windows10, windows7, windows8",
                            PcPartId = 34,
                            Ports = "1x HDMI Versie 2.0b, 3x DisplayPort Versie 1.4",
                            PowerUsage = 105.59999999999999
                        },
                        new
                        {
                            Id = 7,
                            BoostFrequency = 1770.0,
                            Connection = "PCIe x16 Versie 3.0",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(9404),
                            Description = "gtx 1050ti, good for gaming and video editing up to 4K",
                            Frequency = 1500.0,
                            Memory = 8.0,
                            MemoryType = 2,
                            Os = "linux, windows10, windows7, windows8",
                            PcPartId = 29,
                            Ports = "1x HDMI Versie 2.0b, 3x DisplayPort Versie 1.4",
                            PowerUsage = 105.59999999999999
                        });
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Parts.Memory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cache");

                    b.Property<double>("Capacity");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("Interface");

                    b.Property<int>("PcPartId");

                    b.Property<double>("PowerUsage");

                    b.Property<double>("Speed");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("PcPartId");

                    b.ToTable("Memory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cache = 8.0,
                            Capacity = 500.0,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(3631),
                            PcPartId = 2,
                            PowerUsage = 50.0,
                            Speed = 200.0,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 2,
                            Cache = 8.0,
                            Capacity = 500.0,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(5346),
                            PcPartId = 3,
                            PowerUsage = 50.0,
                            Speed = 200.0,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 3,
                            Cache = 8.0,
                            Capacity = 500.0,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(5366),
                            PcPartId = 18,
                            PowerUsage = 50.0,
                            Speed = 200.0,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 4,
                            Cache = 8.0,
                            Capacity = 1000.0,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(5370),
                            PcPartId = 20,
                            PowerUsage = 50.0,
                            Speed = 200.01300000000001,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 5,
                            Cache = 8.0,
                            Capacity = 5000.0,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(5374),
                            PcPartId = 21,
                            PowerUsage = 50.0,
                            Speed = 200.08000000000001,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 6,
                            Cache = 8.0,
                            Capacity = 8000.0,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(5377),
                            PcPartId = 22,
                            PowerUsage = 50.0,
                            Speed = 200.08000000000001,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 7,
                            Cache = 8.0,
                            Capacity = 500.0,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(5381),
                            PcPartId = 23,
                            PowerUsage = 50.0,
                            Speed = 200.0,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 8,
                            Cache = 8.0,
                            Capacity = 8000.0,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(5384),
                            PcPartId = 24,
                            PowerUsage = 50.0,
                            Speed = 200.08000000000001,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 9,
                            Cache = 8.0,
                            Capacity = 1000.0,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(5388),
                            PcPartId = 26,
                            PowerUsage = 50.0,
                            Speed = 200.011,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 10,
                            Cache = 8.0,
                            Capacity = 2000.0,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(5391),
                            PcPartId = 27,
                            PowerUsage = 50.0,
                            Speed = 200.0,
                            Weight = 100.0
                        });
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Parts.MotherBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BiosType");

                    b.Property<string>("Chipset");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("Inputs");

                    b.Property<double>("MaxMemory");

                    b.Property<int>("MemorySlotCount");

                    b.Property<int>("PcPartId");

                    b.Property<int>("SupportedMemoryType");

                    b.Property<string>("Usage");

                    b.HasKey("Id");

                    b.HasIndex("PcPartId");

                    b.ToTable("MotherBoards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BiosType = "Uefi",
                            Chipset = "something",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(6987),
                            Inputs = "pcie",
                            MaxMemory = 128.5,
                            MemorySlotCount = 6,
                            PcPartId = 7,
                            SupportedMemoryType = 3,
                            Usage = "pc"
                        },
                        new
                        {
                            Id = 2,
                            BiosType = "Uefi",
                            Chipset = "something",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(9554),
                            Inputs = "pcie",
                            MaxMemory = 128.5,
                            MemorySlotCount = 6,
                            PcPartId = 8,
                            SupportedMemoryType = 3,
                            Usage = "pc"
                        },
                        new
                        {
                            Id = 3,
                            BiosType = "Uefi",
                            Chipset = "something",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(9582),
                            Inputs = "pcie",
                            MaxMemory = 128.5,
                            MemorySlotCount = 6,
                            PcPartId = 11,
                            SupportedMemoryType = 3,
                            Usage = "pc"
                        },
                        new
                        {
                            Id = 4,
                            BiosType = "Uefi",
                            Chipset = "something",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(9587),
                            Inputs = "pcie",
                            MaxMemory = 128.5,
                            MemorySlotCount = 6,
                            PcPartId = 12,
                            SupportedMemoryType = 3,
                            Usage = "pc"
                        },
                        new
                        {
                            Id = 5,
                            BiosType = "Uefi",
                            Chipset = "something",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(9590),
                            Inputs = "pcie",
                            MaxMemory = 128.5,
                            MemorySlotCount = 6,
                            PcPartId = 17,
                            SupportedMemoryType = 3,
                            Usage = "pc"
                        },
                        new
                        {
                            Id = 6,
                            BiosType = "Uefi",
                            Chipset = "something",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(9594),
                            Inputs = "pcie",
                            MaxMemory = 128.5,
                            MemorySlotCount = 6,
                            PcPartId = 19,
                            SupportedMemoryType = 3,
                            Usage = "pc"
                        });
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Parts.PcCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("Dimentions");

                    b.Property<string>("InternalDimentions");

                    b.Property<string>("Materials");

                    b.Property<int>("PcPartId");

                    b.HasKey("Id");

                    b.HasIndex("PcPartId");

                    b.ToTable("PcCases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "black",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 211, DateTimeKind.Local).AddTicks(9923),
                            Description = "newest case from asus ",
                            Dimentions = "100,30,30",
                            InternalDimentions = "100,30,30",
                            Materials = "aluminium",
                            PcPartId = 9
                        },
                        new
                        {
                            Id = 2,
                            Color = "black",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 212, DateTimeKind.Local).AddTicks(1197),
                            Description = "newest case from thermaltake ",
                            Dimentions = "100,30,30",
                            InternalDimentions = "100,30,30",
                            Materials = "aluminium",
                            PcPartId = 25
                        },
                        new
                        {
                            Id = 3,
                            Color = "black",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 212, DateTimeKind.Local).AddTicks(1218),
                            Description = "newest case from cougar",
                            Dimentions = "100,30,30",
                            InternalDimentions = "100,30,30",
                            Materials = "aluminium",
                            PcPartId = 10
                        },
                        new
                        {
                            Id = 4,
                            Color = "black",
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 212, DateTimeKind.Local).AddTicks(1221),
                            Description = "newest case from corsair",
                            Dimentions = "100,30,30",
                            InternalDimentions = "100,30,30",
                            Materials = "aluminium",
                            PcPartId = 28
                        });
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.PcPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Ean");

                    b.Property<int>("MakerId");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MakerId");

                    b.ToTable("PcParts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(3596),
                            Ean = "131653135165133",
                            MakerId = 1,
                            Name = "GeForce GTX 1660 Ti",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(3606),
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4853),
                            Ean = "321365646561231",
                            MakerId = 11,
                            Name = "wd blue sn500gb nvme ssd",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4862),
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4877),
                            Ean = "232235846323225",
                            MakerId = 8,
                            Name = "Segate SSD500GB",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4880),
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4883),
                            Ean = "321365646561231",
                            MakerId = 3,
                            Name = "amd ryzen 5",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4885),
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4888),
                            Ean = "321365646561231",
                            MakerId = 3,
                            Name = "amd ryzen 7",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4892),
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4895),
                            Ean = "321365646561231",
                            MakerId = 3,
                            Name = "amd ryzen 9",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4898),
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4901),
                            Ean = "321365646561231",
                            MakerId = 14,
                            Name = "asus gaming",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4904),
                            Type = 3
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4907),
                            Ean = "321365646561231",
                            MakerId = 14,
                            Name = "asus rog strix",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4909),
                            Type = 3
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4912),
                            Ean = "321365646561231",
                            MakerId = 14,
                            Name = "asus rog strix helios",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4915),
                            Type = 4
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4918),
                            Ean = "321365646561231",
                            MakerId = 12,
                            Name = "Cougar conquer atx gaming",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4920),
                            Type = 4
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4924),
                            Ean = "321365646561231",
                            MakerId = 7,
                            Name = "gigabyte md80",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4926),
                            Type = 3
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4929),
                            Ean = "321365646561231",
                            MakerId = 7,
                            Name = "gigabyte x570",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4932),
                            Type = 3
                        },
                        new
                        {
                            Id = 13,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4935),
                            Ean = "321365646561231",
                            MakerId = 2,
                            Name = "intel core pentium",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4938),
                            Type = 0
                        },
                        new
                        {
                            Id = 14,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4941),
                            Ean = "321365646561231",
                            MakerId = 2,
                            Name = "intel i5",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4943),
                            Type = 0
                        },
                        new
                        {
                            Id = 15,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4947),
                            Ean = "321365646561231",
                            MakerId = 2,
                            Name = "intel i7",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4950),
                            Type = 0
                        },
                        new
                        {
                            Id = 16,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4953),
                            Ean = "321365646561231",
                            MakerId = 2,
                            Name = "intel i9",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4956),
                            Type = 0
                        },
                        new
                        {
                            Id = 17,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4959),
                            Ean = "321365646561231",
                            MakerId = 2,
                            Name = "intel server motherbaord",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4962),
                            Type = 3
                        },
                        new
                        {
                            Id = 18,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4965),
                            Ean = "321365646561231",
                            MakerId = 15,
                            Name = "Ldlc ssd pcie nvme",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4967),
                            Type = 2
                        },
                        new
                        {
                            Id = 19,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4970),
                            Ean = "321365646561231",
                            MakerId = 9,
                            Name = "msi b450 gaming",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4973),
                            Type = 3
                        },
                        new
                        {
                            Id = 20,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4976),
                            Ean = "321365646561231",
                            MakerId = 13,
                            Name = "sandisk sdcard 1tb",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4979),
                            Type = 2
                        },
                        new
                        {
                            Id = 21,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4981),
                            Ean = "321365646561231",
                            MakerId = 8,
                            Name = "seagate barracuda 5tb",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4984),
                            Type = 2
                        },
                        new
                        {
                            Id = 22,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4987),
                            Ean = "321365646561231",
                            MakerId = 8,
                            Name = "seagate barracuda 8tb",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4990),
                            Type = 2
                        },
                        new
                        {
                            Id = 23,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4993),
                            Ean = "321365646561231",
                            MakerId = 8,
                            Name = "seagate barracuda ssd 510gb",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4995),
                            Type = 2
                        },
                        new
                        {
                            Id = 24,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(4998),
                            Ean = "321365646561231",
                            MakerId = 8,
                            Name = "seagate nightghawk 8tb",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5001),
                            Type = 2
                        },
                        new
                        {
                            Id = 25,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5004),
                            Ean = "321365646561231",
                            MakerId = 10,
                            Name = "thermaltake core3 g3 ",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5006),
                            Type = 4
                        },
                        new
                        {
                            Id = 26,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5009),
                            Ean = "321365646561231",
                            MakerId = 11,
                            Name = "wd blue 1tb",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5012),
                            Type = 2
                        },
                        new
                        {
                            Id = 27,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5015),
                            Ean = "321365646561231",
                            MakerId = 11,
                            Name = "wd red nas hdd 2tb",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5018),
                            Type = 2
                        },
                        new
                        {
                            Id = 28,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5021),
                            Ean = "321365646561231",
                            MakerId = 12,
                            Name = "corsair carbide spec omega",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5023),
                            Type = 4
                        },
                        new
                        {
                            Id = 29,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5026),
                            Ean = "321365646561231",
                            MakerId = 3,
                            Name = "gtx 1050ti",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5029),
                            Type = 1
                        },
                        new
                        {
                            Id = 30,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5032),
                            Ean = "321365646561231",
                            MakerId = 1,
                            Name = "geforce gtx 1070",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5034),
                            Type = 1
                        },
                        new
                        {
                            Id = 31,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5037),
                            Ean = "321365646561231",
                            MakerId = 1,
                            Name = "geforce rtx 2080ti ",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5040),
                            Type = 1
                        },
                        new
                        {
                            Id = 32,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5044),
                            Ean = "321365646561231",
                            MakerId = 3,
                            Name = "amd vega 11",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5046),
                            Type = 1
                        },
                        new
                        {
                            Id = 33,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5050),
                            Ean = "321365646561231",
                            MakerId = 3,
                            Name = "amd radeon rx5700",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5052),
                            Type = 1
                        },
                        new
                        {
                            Id = 34,
                            CreationDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5055),
                            Ean = "321365646561231",
                            MakerId = 3,
                            Name = "radeon rx 5600xt",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2020, 3, 29, 20, 24, 27, 210, DateTimeKind.Local).AddTicks(5058),
                            Type = 1
                        });
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.BearerHistory", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Image", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.PcPart", "PcPart")
                        .WithMany("Images")
                        .HasForeignKey("PcPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Message", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Order", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.User", "PlatformUser")
                        .WithMany()
                        .HasForeignKey("PlatformUserId");
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.OrderItem", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId");

                    b.HasOne("ComputerStore.Lib.Models.PcPart", "PcParts")
                        .WithMany()
                        .HasForeignKey("PcPartsId");
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Parts.Cpu", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.PcPart", "PcPart")
                        .WithMany()
                        .HasForeignKey("PcPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Parts.Gpu", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.PcPart", "PcPart")
                        .WithMany()
                        .HasForeignKey("PcPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Parts.Memory", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.PcPart", "PcPart")
                        .WithMany()
                        .HasForeignKey("PcPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Parts.MotherBoard", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.PcPart", "PcPart")
                        .WithMany()
                        .HasForeignKey("PcPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.Parts.PcCase", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.PcPart", "PcPart")
                        .WithMany()
                        .HasForeignKey("PcPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComputerStore.Lib.Models.PcPart", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.Maker", "Maker")
                        .WithMany()
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComputerStore.Lib.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ComputerStore.Lib.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
